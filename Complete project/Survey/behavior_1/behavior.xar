<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram scale="70.7107"><Box name="survey+sum" id="6" localization="8" tooltip="Enter description here" x="753" y="221"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="Survey_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Output name="PythonScript_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Survey" id="1" localization="8" tooltip="" x="248" y="132"><dialogFile>../Survey/Survey.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Output name="softwarename" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" /><Output name="score" type="2" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="event" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" /></Box><Box name="confirmation" id="8" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="741" y="131"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self,softwarename):
        # Get TabletService
        tabletService = self._getTabletService()


        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # Use default robot IP address from the tablet
                robotIP = "198.18.0.1"

                # Set page details
                pageImage = "picture1.jpg"
                pageHeading = "How familiar are you with "+softwarename+" ?"
                self.logger.info(pageHeading)
                pageText = "Please select from 1-5 option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/confirmation.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(
                    ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="softwarename" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="4" /></Box><Box name="Subscribe to Event" id="16" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="326" y="456"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal
                self.logger.info("subscribed")

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="surveyAnswers" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="Declare Event" id="17" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="198" y="435"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")
    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.declareEvent("surveyAnswers")
        self.onStopped(1)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="MyApplication/MyData" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Box name="Show Web View" id="3" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="1160" y="264"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # Get TabletService
        tabletService = self._getTabletService()


        # Get the app name
        appName = self.packageUid()
        file = "/home/nao/answers.txt"
        score01=0
        with open(file, 'r+') as file:
            # Read the first line and store it in a variable
            score01 = file.read()

        if appName:
            if tabletService:
                # Use default robot IP address from the tablet
                robotIP = "198.18.0.1"

                # Set page details
                pageImage = "download.jpeg"
                pageHeading = "your score is "+score01+" /30 "
                self.logger.info(pageHeading)


                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/final_screen.html?pageHeading={pageHeading}&pageImage={pageImage}&score01={score01}".format(
                    ip=robotIP, appName=appName, pageHeading=pageHeading, pageImage=pageImage, score01=score01)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="Reboot" id="4" localization="1" tooltip="Reboot the connected robot, if it is not virtual.&#x0A;&#x0A;V1.1.0&#x0A;" x="346" y="693"><bitmap>media/images/box/box-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        try:
            system = ALProxy("ALSystem")
            system.reboot()
        except:
            self.logger.error("Cannot reboot a virtual robot")]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /></Box><Box name="Python Script (2)" id="5" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="676" y="477"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import sqlite3

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def _getMemoryService(self):
        memoryService = None
        try:
            tabletService = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return memoryService

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, data):
        # filename to form database
        file01 = "/home/nao/answers.txt"
#        get data from file
        with open(file01, 'r+') as file:
            # Read the first line and store it in a variable
            previousSum = file.read()

            self.logger.info("old old " + previousSum)
            if(previousSum == ""):
                file.seek(0)
                file.write(str(data)+" ")
                self.logger.info("here "+ data)
                self.logger.info("log data"+ file.read())
                self.onStopped()
                return

            else:  # Check if the line contains a valid integer
                file.seek(0)
                previousSum = file.read().strip()
                self.logger.info("old value "+ previousSum)
                self.logger.info(type(data))
                self.logger.info(data)
                newSum = int(previousSum) + int(data)
                self.logger.info("new sum "+ str(newSum))
                file.seek(0)
                file.write(str(newSum))

                self.onStopped()
                return

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="data" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /></Box><Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="840" y="281"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="15" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" /></Box><Link inputowner="16" indexofinput="2" outputowner="17" indexofoutput="4" /><Link inputowner="8" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="17" indexofinput="2" outputowner="1" indexofoutput="6" /><Link inputowner="5" indexofinput="2" outputowner="16" indexofoutput="6" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="3" outputowner="3" indexofoutput="3" /><Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="5" /><Link inputowner="3" indexofinput="2" outputowner="14" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="Python Script" id="2" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1506" y="152"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import sqlite3

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def _getMemoryService(self):
        memoryService = None
        try:
            tabletService = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return memoryService

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, data):
        # filename to form database
        file = "/home/nao/answers.txt"
#        get data from file
        with open(file, 'w+') as file:
            file.read()
        file01 = "/home/nao/answers01.txt"
#        get data from file
        with open(file01, 'w+') as file:
            file.read()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="data" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /></Box><Box name="us03" id="1" localization="8" tooltip="Enter description here" x="1032" y="197"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="quiz_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Output name="PythonScript1_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="confirmation" id="8" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="603" y="90"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self,question):
        # Get TabletService
        tabletService = self._getTabletService()


        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # Use default robot IP address from the tablet
                robotIP = "198.18.0.1"

                # Set page details
                pageImage = "picture1.jpg"
                pageHeading = question
                self.logger.info(pageHeading)
                pageText = "Only one answer is right"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/confirmationtest.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="softwarename" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="4" /></Box><Box name="Python Script" id="15" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="1015" y="444"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import sqlite3

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def _getMemoryService(self):
        memoryService = None
        try:
            tabletService = self.session().service("ALMemory")
        except Exception as e:
            self.logger.error(e)
        return memoryService

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, data):
        # filename to form database
        file = "/home/nao/answers01.txt"
#        get data from file
        with open(file, 'r+') as file:
            # Read the first line and store it in a variable
            previousSum = file.read()

            self.logger.info("old old " + previousSum)
            if(previousSum == ""):
                file.seek(0)
                file.write(str(data)+" ")
                self.logger.info("here "+ data)
                self.logger.info("log data"+ file.read())
                self.onStopped()
                return

            else:  # Check if the line contains a valid integer
                file.seek(0)
                previousSum = file.read().strip()
                self.logger.info("old value "+ previousSum)
                self.logger.info(type(data))
                self.logger.info(data)
                newSum = int(previousSum) + int(data)
                self.logger.info("new sum "+ str(newSum))
                file.seek(0)
                file.write(str(newSum))

                self.onStopped()
                return

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="data" type="0" type_size="1" nature="2" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /></Box><Box name="Subscribe to Event" id="16" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="668" y="401"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal
                self.logger.info("subscribed")

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="5" /><Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="6" /><Parameter name="event" inherits_from_parent="0" content_type="3" value="surveyAnswers" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" /></Box><Box name="Declare Event" id="17" localization="8" tooltip="Stores in NAOqi&apos;s shared memory the given value at the given key, and spreads the event to all its subscribers." x="398" y="379"><bitmap>media/images/box/sensors/STM.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        self.memory = ALProxy("ALMemory")
    def onUnload(self):
        self.memory = None

    def onInput_onStart(self):
        self.memory.declareEvent("surveyAnswers")
        self.onStopped(1)

    def onInput_onStop(self):
        self.onUnload() #~ it is recommended to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Receives the value to be inserted as an event in ALMemory." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="2" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished. It contains the inserted value in ALMemory." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="Output when error is raised by the behavior. Contains the error message." id="5" /><Parameter name="key" inherits_from_parent="0" content_type="3" value="MyApplication/MyData" default_value="MyApplication/MyData" custom_choice="0" tooltip="" id="6" /></Box><Box name="Show Web View" id="4" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="564" y="270"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):

    def _init_(self):
        GeneratedClass._init_(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # Get TabletService
        tabletService = self._getTabletService()


        # Get the app name
        appName = self.packageUid()
        file = "/home/nao/answers01.txt"
        score01=0
        with open(file, 'r+') as file:
            # Read the first line and store it in a variable
            score01 = file.read()

        if appName:
            if tabletService:
                # Use default robot IP address from the tablet
                robotIP = "198.18.0.1"

                # Set page details
                pageImage = "download.jpeg"
                pageHeading = "your score is "+score01+" /6 "
                self.logger.info(pageHeading)


                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/final_screen2.html?pageHeading={pageHeading}&pageImage={pageImage}&score01={score01}".format(
                    ip=robotIP, appName=appName, pageHeading=pageHeading, pageImage=pageImage, score01=score01)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="concepts" id="1" localization="8" tooltip="" x="199" y="336"><dialogFile>../concepts/concepts.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="quiz" id="2" localization="8" tooltip="" x="182" y="162"><dialogFile>../quiz/quiz.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="question" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="score" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="event" type="2" type_size="1" nature="2" inner="0" tooltip="" id="7" /></Box><Box name="Reboot" id="3" localization="1" tooltip="Reboot the connected robot, if it is not virtual.&#x0A;&#x0A;V1.1.0&#x0A;" x="94" y="278"><bitmap>media/images/box/box-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        try:
            system = ALProxy("ALSystem")
            system.reboot()
        except:
            self.logger.error("Cannot reboot a virtual robot")]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /></Box><Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="6" /><Link inputowner="16" indexofinput="2" outputowner="17" indexofoutput="4" /><Link inputowner="8" indexofinput="2" outputowner="2" indexofoutput="5" /><Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="6" /><Link inputowner="17" indexofinput="2" outputowner="2" indexofoutput="7" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="3" outputowner="4" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="initial" id="7" localization="8" tooltip="Enter description here" x="464" y="128"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="initiateInteraction_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Output name="initiateInteraction_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Output name="noWebview_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="4" /><Output name="nextBehavior_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="5" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="initiateInteraction" id="1" localization="8" tooltip="" x="255" y="164"><dialogFile>../initiateInteraction/initiateInteraction.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="yesOutput" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="showQuestion1" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="helloAnimated" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /></Box><Box name="Show Image" id="13" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="970" y="162"><bitmap>media/images/box/interaction/rec_movie.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self.packageUid(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self,url):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                self.logger.info(url)
                tabletService.showImage(url)
                self.onStopped()
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" /><Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Parameter name="url" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" /></Box><Box name="Confirmation (1)" id="6" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="939" y="277"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "compElec.jpg"
                pageHeading = "You now have to decide between electrical and computer"
                pageText = "Please select an option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/confirmation2.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="no Webview" id="4" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="870" y="506"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[
class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageHeading = "Please reffer to another robot"
                pageText = "You can try robot A11 or A12"
                pageImage = "computer.jpg"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/displayinfo.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText,pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="noOutput" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="" id="4" /></Box><Box name="yes Webview" id="3" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="861" y="381"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[
class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageHeading = "Ah so you are applying for electrical "
                pageText = "That is great, I am ready to help you with the proccess"
                pageImage = "electrical.jpg"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/displayinfo.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText,pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="yesOutput" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="4" /></Box><Box name="Hello" id="2" localization="8" tooltip="tags:&#x0A;hello; hey; hi" x="290" y="348"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.oldfps = ALFrameManager.getTimelineFps(self.getName())
        try:
            frameNumber.increaseParent( self.getName() );
        except BaseException, err:
            # if you don't want to use some encapsulated sub box, you will in that case. no worry...
            pass

    def onLoad(self):
        #puts code for box cleanup here
        pass

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        newfps = (self.oldfps * self.getParameter("FPS (%)")) / 100
        ALFrameManager.setTimelineFps(self.getName(), newfps)
        pass

    def onInput_onStop(self):
        ""]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="FPS (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="20" max="200" tooltip="" id="5" /><Timeline enable="1" fps="25" start_frame="1" end_frame="185" size="185"><BehaviorLayer name="led"><BehaviorKeyframe name="FaceLeds" index="35"><Diagram><Box name="Light_AskForAttentionEyes" id="1" localization="8" tooltip="Set an animated gaze which calls for attention (purple eyes).&#x0A;&#x0A;Note: It is a never ending box. You must call onStop to stop it.&#x0A;&#x0A;*** state: 5a_release ***&#x0A;*** ref box in: 5a_release\Leds\Light_AskForAttentionEyes\Light_AskForAttentionEyes.xar ***&#x0A;*** last modification date(svn): Version it! ***" x="208" y="59"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.bMustStop = False;
    self.bIsRunning = False;

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self):
    #self.log( self.getName() + ": start - begin" );

    if( self.bIsRunning ):
      #print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;

    rDuration = 0.2;
    ALLeds.post.fadeRGB( "FaceLedsTop", 0x0099FF, rDuration );
    ALLeds.post.fadeRGB( "FaceLedsInternal", 0x0099FF, rDuration );
    ALLeds.post.fadeRGB( "FaceLedsBottom", 0x0099FF, rDuration );
    ALLeds.fadeRGB( "FaceLedsExternal", 0x0099FF, rDuration );

    while( not self.bMustStop ):
      rTime = 0.1;
      ALLeds.post.fadeRGB( "FaceLedsTop", 0xffffff, rTime );
      ALLeds.fadeRGB( "FaceLedsBottom", 0xffffff, rTime );
      if( self.bMustStop ):
        break;
      rTime = 0.3
      ALLeds.post.fadeRGB( "FaceLedsTop", 0x0099FF, rTime );
      ALLeds.fadeRGB( "FaceLedsBottom", 0x0099FF, rTime );


    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="tablet"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Show Image" id="13" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="183" y="42"><bitmap>media/images/box/interaction/rec_movie.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAppName(self):
        import os
        if self.frameManager:
            behaviorPath = os.path.normpath(self.frameManager.getBehaviorPath(self.behaviorId))
            appsFolderFragment = os.path.join("PackageManager", "apps")
            if not (appsFolderFragment in behaviorPath):
                self.logger.error("appsFolderFragment is not in behaviorPath")
            fragment = behaviorPath.split(appsFolderFragment, 1)[1]
            return fragment.lstrip("\\/")
        else:
            self.logger.warning("No ALFrameManager")

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self._getAppName(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("ImageUrl")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.showImage(url)
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" /><Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Parameter name="ImageUrl" inherits_from_parent="0" content_type="3" value="hello.gif" default_value="" custom_choice="0" tooltip='path of the image inside the &quot;html&quot; folder (e.g. &quot;/images/myimage.png&quot;' id="7" /></Box><Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="nao"><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="45" value="87.5378" /><Key frame="64" value="87.4499" /><Key frame="95" value="87.7135" /><Key frame="122" value="89.1198" /><Key frame="140" value="87.2741" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="45" value="7.11683" /><Key frame="64" value="4.65586" /><Key frame="95" value="4.65586" /><Key frame="122" value="4.91953" /><Key frame="140" value="7.02893" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="45" value="-67.1517" /><Key frame="64" value="-59.0656" /><Key frame="95" value="-61.4387" /><Key frame="122" value="-66.1849" /><Key frame="140" value="-67.1517" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="45" value="-28.1229" /><Key frame="64" value="-32.6933" /><Key frame="95" value="-32.6933" /><Key frame="122" value="-31.1992" /><Key frame="140" value="-28.1229" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="140" value="7.11683" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="140" value="0.3004" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="43" value="14.153" /><Key frame="62" value="-66.6195" /><Key frame="79" value="-62.4007" /><Key frame="93" value="-71.1899" /><Key frame="110" value="-65.8285" /><Key frame="120" value="-16.8728" /><Key frame="138" value="86.1363" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="43" value="-13.8893" /><Key frame="62" value="-55.1105" /><Key frame="79" value="-26.3699" /><Key frame="93" value="-55.1984" /><Key frame="110" value="-18.8112" /><Key frame="120" value="-12.3072" /><Key frame="138" value="-7.12163" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="43" value="-17.9323" /><Key frame="62" value="32.3418" /><Key frame="79" value="22.41" /><Key frame="93" value="20.3006" /><Key frame="110" value="21.8826" /><Key frame="120" value="55.1936" /><Key frame="138" value="66.6195" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="43" value="79.3686" /><Key frame="62" value="14.4166" /><Key frame="69" value="20" /><Key frame="79" value="53.5285" /><Key frame="87" value="39" /><Key frame="93" value="11.692" /><Key frame="103" value="15" /><Key frame="110" value="40.5205" /><Key frame="120" value="56.6926" /><Key frame="138" value="24.7879" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="62" value="-17.9323" /><Key frame="110" value="-17.405" /><Key frame="138" value="9.75358" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="62" value="0.853478" /><Key frame="110" value="0.854933" /><Key frame="138" value="0.3044" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="nextBehavior" id="9" localization="8" tooltip="" x="1342" y="184"><dialogFile>../nextBehavior/nextBehavior.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="concepts" id="10" localization="8" tooltip="" x="96" y="357"><dialogFile>../concepts01/concepts01.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="block2" id="5" localization="8" tooltip="" x="686" y="263"><dialogFile>../block2/block2.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="showImage" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /><Output name="showOptions" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="electrical" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Output name="computer" type="3" type_size="1" nature="2" inner="0" tooltip="" id="8" /></Box><Box name="Confirmation" id="8" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="485" y="354"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()

        # Get the app name
        appName = self.packageUid()

        if appName:
            if tabletService:
                # use default robot IP address from the tablet
                robotIP = "198.18.0.1" # tabletService.getRobotIp()

                # Set page details
                pageImage = "picture1.jpg"
                pageHeading = "You now have to decide"
                pageText = "Please select an option"

                # Set the URL
                url = "http://{ip}/apps/{appName}/pages/confirmation1.html?pageHeading={pageHeading}&pageText={pageText}&pageImage={pageImage}".format(ip=robotIP, appName=appName, pageHeading=pageHeading, pageText=pageText, pageImage=pageImage)

                self.logger.info(url)

                # Show the web view on the tablet
                tabletService.showWebview(url)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)

        #
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Link inputowner="5" indexofinput="2" outputowner="1" indexofoutput="5" /><Link inputowner="8" indexofinput="2" outputowner="1" indexofoutput="6" /><Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="6" /><Link inputowner="3" indexofinput="2" outputowner="5" indexofoutput="7" /><Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="5" /><Link inputowner="4" indexofinput="2" outputowner="5" indexofoutput="8" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="7" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="4" /><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="3" /><Link inputowner="0" indexofinput="5" outputowner="9" indexofoutput="4" /><Link inputowner="9" indexofinput="2" outputowner="13" indexofoutput="6" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Box name="us04" id="4" localization="8" tooltip="Enter description here" x="1230" y="214"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="closing_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" /><Output name="Hello1_onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="closing" id="1" localization="8" tooltip="" x="322" y="147"><dialogFile>../closing/closing.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Hello (1)" id="3" localization="8" tooltip="tags:&#x0A;goodbye" x="567" y="153"><bitmap>media/images/box/movement/move.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.oldfps = ALFrameManager.getTimelineFps(self.getName())
        try:
            frameNumber.increaseParent( self.getName() );
        except BaseException, err:
            # if you don't want to use some encapsulated sub box, you will in that case. no worry...
            pass

    def onLoad(self):
        #puts code for box cleanup here
        pass

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onInput_onStart(self):
        newfps = (self.oldfps * self.getParameter("FPS (%)")) / 100
        ALFrameManager.setTimelineFps(self.getName(), newfps)
        pass

    def onInput_onStop(self):
        ""]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="FPS (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="20" max="200" tooltip="" id="5" /><Timeline enable="1" fps="25" start_frame="1" end_frame="185" size="185"><BehaviorLayer name="led"><BehaviorKeyframe name="FaceLeds" index="35"><Diagram><Box name="Light_AskForAttentionEyes" id="1" localization="8" tooltip="Set an animated gaze which calls for attention (purple eyes).&#x0A;&#x0A;Note: It is a never ending box. You must call onStop to stop it.&#x0A;&#x0A;*** state: 5a_release ***&#x0A;*** ref box in: 5a_release\Leds\Light_AskForAttentionEyes\Light_AskForAttentionEyes.xar ***&#x0A;*** last modification date(svn): Version it! ***" x="208" y="59"><bitmap>media/images/box/interaction/LED.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self);
    self.bMustStop = False;
    self.bIsRunning = False;

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self):
    #self.log( self.getName() + ": start - begin" );

    if( self.bIsRunning ):
      #print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;

    rDuration = 0.2;
    ALLeds.post.fadeRGB( "FaceLedsTop", 0x0099FF, rDuration );
    ALLeds.post.fadeRGB( "FaceLedsInternal", 0x0099FF, rDuration );
    ALLeds.post.fadeRGB( "FaceLedsBottom", 0x0099FF, rDuration );
    ALLeds.fadeRGB( "FaceLedsExternal", 0x0099FF, rDuration );

    while( not self.bMustStop ):
      rTime = 0.1;
      ALLeds.post.fadeRGB( "FaceLedsTop", 0xffffff, rTime );
      ALLeds.fadeRGB( "FaceLedsBottom", 0xffffff, rTime );
      if( self.bMustStop ):
        break;
      rTime = 0.3
      ALLeds.post.fadeRGB( "FaceLedsTop", 0x0099FF, rTime );
      ALLeds.fadeRGB( "FaceLedsBottom", 0x0099FF, rTime );


    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="tablet"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Show Image" id="13" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="183" y="42"><bitmap>media/images/box/interaction/rec_movie.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        self.frameManager = None
        try:
            self.frameManager = ALProxy("ALFrameManager")
        except Exception as e:
            self.logger.error(e)

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAppName(self):
        import os
        if self.frameManager:
            behaviorPath = os.path.normpath(self.frameManager.getBehaviorPath(self.behaviorId))
            appsFolderFragment = os.path.join("PackageManager", "apps")
            if not (appsFolderFragment in behaviorPath):
                self.logger.error("appsFolderFragment is not in behaviorPath")
            fragment = behaviorPath.split(appsFolderFragment, 1)[1]
            return fragment.lstrip("\\/")
        else:
            self.logger.warning("No ALFrameManager")

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self._getAppName(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                url = self.getParameter("ImageUrl")
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                tabletService.showImage(url)
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" /><Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Parameter name="ImageUrl" inherits_from_parent="0" content_type="3" value="hello.gif" default_value="" custom_choice="0" tooltip='path of the image inside the &quot;html&quot; folder (e.g. &quot;/images/myimage.png&quot;' id="7" /></Box><Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model="nao"><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="45" value="87.5378" /><Key frame="64" value="87.4499" /><Key frame="95" value="87.7135" /><Key frame="122" value="89.1198" /><Key frame="140" value="87.2741" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="45" value="7.11683" /><Key frame="64" value="4.65586" /><Key frame="95" value="4.65586" /><Key frame="122" value="4.91953" /><Key frame="140" value="7.02893" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="45" value="-67.1517" /><Key frame="64" value="-59.0656" /><Key frame="95" value="-61.4387" /><Key frame="122" value="-66.1849" /><Key frame="140" value="-67.1517" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="45" value="-28.1229" /><Key frame="64" value="-32.6933" /><Key frame="95" value="-32.6933" /><Key frame="122" value="-31.1992" /><Key frame="140" value="-28.1229" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="140" value="7.11683" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="140" value="0.3004" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="43" value="14.153" /><Key frame="62" value="-66.6195" /><Key frame="79" value="-62.4007" /><Key frame="93" value="-71.1899" /><Key frame="110" value="-65.8285" /><Key frame="120" value="-16.8728" /><Key frame="138" value="86.1363" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="43" value="-13.8893" /><Key frame="62" value="-55.1105" /><Key frame="79" value="-26.3699" /><Key frame="93" value="-55.1984" /><Key frame="110" value="-18.8112" /><Key frame="120" value="-12.3072" /><Key frame="138" value="-7.12163" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="43" value="-17.9323" /><Key frame="62" value="32.3418" /><Key frame="79" value="22.41" /><Key frame="93" value="20.3006" /><Key frame="110" value="21.8826" /><Key frame="120" value="55.1936" /><Key frame="138" value="66.6195" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="43" value="79.3686" /><Key frame="62" value="14.4166" /><Key frame="69" value="20" /><Key frame="79" value="53.5285" /><Key frame="87" value="39" /><Key frame="93" value="11.692" /><Key frame="103" value="15" /><Key frame="110" value="40.5205" /><Key frame="120" value="56.6926" /><Key frame="138" value="24.7879" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="62" value="-17.9323" /><Key frame="110" value="-17.405" /><Key frame="138" value="9.75358" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="62" value="0.853478" /><Key frame="110" value="0.854933" /><Key frame="138" value="0.3044" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve><ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1"><Key frame="63" value="0" /><Key frame="139" value="0" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="byebye" id="2" localization="8" tooltip="" x="608" y="329"><dialogFile>../byebye/byebye.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="showFinalImage" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" /></Box><Box name="Show Image" id="13" localization="8" tooltip="display an image on the screen&#x0A;&#x0A;V1.0.0&#x0A;" x="861" y="366"><bitmap>media/images/box/interaction/rec_movie.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def _getAbsoluteUrl(self, partial_url):
        import os
        subPath = os.path.join(self.packageUid(), os.path.normpath(partial_url).lstrip("\\/"))
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        return "http://%s/apps/%s" %(self._getTabletService().robotIp(), subPath.replace(os.path.sep, "/"))

    def onInput_onStart(self,url):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                if url == '':
                    self.logger.error("URL of the image is empty")
                if not url.startswith('http'):
                    url = self._getAbsoluteUrl(url)
                self.logger.info(url)
                tabletService.showImage(url)
                self.onStopped()
            except Exception as err:
                self.logger.error("Error during ShowImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't display the image.")
            self.onStopped()

    def onInput_onHideImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                tabletService.hideImage()
            except Exception as err:
                self.logger.error("Error during HideImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't hide the image.")
            self.onStopped()

    def onInput_onPreLoadImage(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            try:
                partialUrl = self.getParameter("ImageUrl")
                fullUrl = self._getAbsoluteUrl(partialUrl)
                tabletService.preLoadImage(fullUrl)
            except Exception as err:
                self.logger.warning("Error during preLoadImage : %s " % err)
                self.onStopped()
        else:
            self.logger.warning("No ALTabletService, can't preload the image.")
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="onHideImage" type="1" type_size="1" nature="1" inner="0" tooltip="Hide the image when a signal is received on this input." id="4" /><Input name="onPreLoadImage" type="1" type_size="1" nature="1" inner="0" tooltip="Preload the image when a signal is received on this input." id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Parameter name="url2" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" /></Box><Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="13" indexofinput="2" outputowner="2" indexofoutput="5" /><Link inputowner="0" indexofinput="3" outputowner="2" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="5" /><Link inputowner="1" indexofinput="2" outputowner="6" indexofoutput="3" /><Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="5" /><Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="4" indexofoutput="3" /><Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="3" /><Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" /><Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>